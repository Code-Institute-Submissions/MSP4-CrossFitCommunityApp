def calc_level_pop(user):
    start_time = time.time()
    # create catagory list and 'reverse' dictionary for queries an initialize list for category levels
    categories = ["Power Lifts", "Olympic Lifts", "Body Weight", "Heavy", "Light", "Long", "Speed", "Endurance"]
    cat_reverse = {"Power Lifts": "PL", "Olympic Lifts": "OL", "Body Weight": "BW", "Heavy": "HE", "Light": "LI", "Long": "LO", "Speed": "SP", "Endurance": "EN"}
    cat_levels = []
    # loop through categories to calculate level per category
    workouts = Workout.objects.all().order_by("workout_category")
    percentiles = []
    wod_level = []
    cat = ''
    last_log = False
    for wod in workouts:
        wod_cat = wod.get_workout_category_display()
        if cat == '':
            cat = wod_cat
        elif cat != wod_cat:
            cat_levels = cat_levels_info(percentiles, cat_levels, cat, wod_level, wod_cat)
            percentiles = []
            wod_level = []
            cat = wod_cat
        data = getLevels(user, wod)
        percentile = data["percentile"]
        result = data["result"]
        if percentile is not None:
            wod_level.append({"wod": wod.workout_name, "wodperc": percentile, "wodpk": wod.pk, "result": result})
            percentiles.append(percentile)
    cat_levels = cat_levels_info(percentiles, cat_levels, cat, wod_level, wod_cat)
    print("HALFWAY " + user.username)
    avg_list = []
    for item in cat_levels:
        if item["perc"] != "none":
            avg_list.append(item["perc"])
    if len(avg_list) != 0:
        general_level = round(statistics.mean(avg_list))
    else:
        general_level = 0
    level_data = HeroLevels.objects.filter(user=user)
    level_data.update(level_data=cat_levels)
    level_data.update(general_level=general_level)


def refreshLevels(request):
    starttime = time.time()
    users = User.objects.all()
    for user in users:
        calc_level_pop(user)
    total = time.time() - starttime
    print("total runtime", total)